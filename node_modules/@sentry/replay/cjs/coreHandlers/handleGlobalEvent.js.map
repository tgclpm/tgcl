{"version":3,"file":"handleGlobalEvent.js","sources":["../../../../src/coreHandlers/handleGlobalEvent.ts"],"sourcesContent":["import { addBreadcrumb } from '@sentry/core';\nimport type { Event } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { REPLAY_EVENT_NAME, UNABLE_TO_SEND_REPLAY } from '../constants';\nimport type { ReplayContainer } from '../types';\nimport { isRrwebError } from '../util/isRrwebError';\n\n/**\n * Returns a listener to be added to `addGlobalEventProcessor(listener)`.\n */\nexport function handleGlobalEventListener(replay: ReplayContainer): (event: Event) => Event | null {\n  return (event: Event) => {\n    // Do not apply replayId to the root event\n    if (event.type === REPLAY_EVENT_NAME) {\n      // Replays have separate set of breadcrumbs, do not include breadcrumbs\n      // from core SDK\n      delete event.breadcrumbs;\n      return event;\n    }\n\n    // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n    // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n    if (isRrwebError(event) && !replay.getOptions()._experiments.captureExceptions) {\n      __DEBUG_BUILD__ && logger.log('[Replay] Ignoring error from rrweb internals', event);\n      return null;\n    }\n\n    // Only tag transactions with replayId if not waiting for an error\n    // @ts-ignore private\n    if (!event.type || replay.recordingMode === 'session') {\n      event.tags = { ...event.tags, replayId: replay.getSessionId() };\n    }\n\n    // Collect traceIds in _context regardless of `recordingMode` - if it's true,\n    // _context gets cleared on every checkout\n    if (event.type === 'transaction' && event.contexts && event.contexts.trace && event.contexts.trace.trace_id) {\n      replay.getContext().traceIds.add(event.contexts.trace.trace_id as string);\n      return event;\n    }\n\n    // no event type means error\n    if (!event.type) {\n      replay.getContext().errorIds.add(event.event_id as string);\n    }\n\n    if (__DEBUG_BUILD__ && replay.getOptions()._experiments.traceInternals) {\n      const exc = getEventExceptionValues(event);\n      addInternalBreadcrumb({\n        message: `Tagging event (${event.event_id}) - ${event.message} - ${exc.type}: ${exc.value}`,\n      });\n    }\n\n    // Need to be very careful that this does not cause an infinite loop\n    if (\n      replay.recordingMode === 'error' &&\n      event.exception &&\n      event.message !== UNABLE_TO_SEND_REPLAY // ignore this error because otherwise we could loop indefinitely with trying to capture replay and failing\n    ) {\n      setTimeout(async () => {\n        // Allow flush to complete before resuming as a session recording, otherwise\n        // the checkout from `startRecording` may be included in the payload.\n        // Prefer to keep the error replay as a separate (and smaller) segment\n        // than the session replay.\n        await replay.flushImmediate();\n\n        if (replay.stopRecording()) {\n          // Reset all \"capture on error\" configuration before\n          // starting a new recording\n          replay.recordingMode = 'session';\n          replay.startRecording();\n        }\n      });\n    }\n\n    return event;\n  };\n}\n\nfunction addInternalBreadcrumb(arg: Parameters<typeof addBreadcrumb>[0]): void {\n  const { category, level, message, ...rest } = arg;\n\n  addBreadcrumb({\n    category: category || 'console',\n    level: level || 'debug',\n    message: `[debug]: ${message}`,\n    ...rest,\n  });\n}\n\nfunction getEventExceptionValues(event: Event): { type: string; value: string } {\n  return {\n    type: 'Unknown',\n    value: 'n/a',\n    ...(event.exception && event.exception.values && event.exception.values[0]),\n  };\n}\n"],"names":["REPLAY_EVENT_NAME","isRrwebError","logger","UNABLE_TO_SEND_REPLAY","addBreadcrumb"],"mappings":"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"}