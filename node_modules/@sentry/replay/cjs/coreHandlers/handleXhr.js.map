{"version":3,"file":"handleXhr.js","sources":["../../../../src/coreHandlers/handleXhr.ts"],"sourcesContent":["import type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from '../util/createPerformanceSpans';\nimport { shouldFilterRequest } from '../util/shouldFilterRequest';\n\n// From sentry-javascript\n// e.g. https://github.com/getsentry/sentry-javascript/blob/c7fc025bf9fa8c073fdb56351808ce53909fbe45/packages/utils/src/instrument.ts#L180\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: unknown;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n    startTimestamp?: number; // This is unique to replay SDK\n  };\n  // If Sentry key appears in request, don't capture as request\n  // See https://github.com/getsentry/sentry-javascript/blob/c7fc025bf9fa8c073fdb56351808ce53909fbe45/packages/utils/src/instrument.ts#L236\n  __sentry_own_request__?: boolean;\n}\n\ninterface XhrHandlerData {\n  args: [string, string];\n  xhr: SentryWrappedXMLHttpRequest;\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nfunction handleXhr(handlerData: XhrHandlerData): ReplayPerformanceEntry | null {\n  if (handlerData.xhr.__sentry_own_request__) {\n    // Taken from sentry-javascript\n    // Only capture non-sentry requests\n    return null;\n  }\n\n  if (handlerData.startTimestamp) {\n    // TODO: See if this is still needed\n    handlerData.xhr.__sentry_xhr__ = handlerData.xhr.__sentry_xhr__ || {};\n    handlerData.xhr.__sentry_xhr__.startTimestamp = handlerData.startTimestamp;\n  }\n\n  if (!handlerData.endTimestamp) {\n    return null;\n  }\n\n  const { method, url, status_code: statusCode } = handlerData.xhr.__sentry_xhr__ || {};\n\n  if (url === undefined) {\n    return null;\n  }\n\n  const timestamp = handlerData.xhr.__sentry_xhr__\n    ? handlerData.xhr.__sentry_xhr__.startTimestamp || 0\n    : handlerData.endTimestamp;\n\n  return {\n    type: 'resource.xhr',\n    name: url,\n    start: timestamp / 1000,\n    end: handlerData.endTimestamp / 1000,\n    data: {\n      method,\n      statusCode,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('xhr', listener)`.\n */\nexport function handleXhrSpanListener(replay: ReplayContainer): (handlerData: XhrHandlerData) => void {\n  return (handlerData: XhrHandlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleXhr(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    if (shouldFilterRequest(replay, result.name)) {\n      return;\n    }\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning true will cause `addUpdate` to not flush\n      // We do not want network requests to cause a flush. This will prevent\n      // recurring/polling requests from keeping the replay session alive.\n      return true;\n    });\n  };\n}\n"],"names":["shouldFilterRequest","createPerformanceSpans"],"mappings":";;;;;AAIA;AACA;;AAwBA,SAAA,SAAA,CAAA,WAAA,EAAA;AACA,EAAA,IAAA,WAAA,CAAA,GAAA,CAAA,sBAAA,EAAA;AACA;AACA;AACA,IAAA,OAAA,IAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,IAAA,WAAA,CAAA,cAAA,EAAA;AACA;AACA,IAAA,WAAA,CAAA,GAAA,CAAA,cAAA,GAAA,WAAA,CAAA,GAAA,CAAA,cAAA,IAAA,EAAA,CAAA;AACA,IAAA,WAAA,CAAA,GAAA,CAAA,cAAA,CAAA,cAAA,GAAA,WAAA,CAAA,cAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,IAAA,CAAA,WAAA,CAAA,YAAA,EAAA;AACA,IAAA,OAAA,IAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,EAAA,MAAA,EAAA,GAAA,EAAA,WAAA,EAAA,UAAA,EAAA,GAAA,WAAA,CAAA,GAAA,CAAA,cAAA,IAAA,EAAA,CAAA;AACA;AACA,EAAA,IAAA,GAAA,KAAA,SAAA,EAAA;AACA,IAAA,OAAA,IAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,SAAA,GAAA,WAAA,CAAA,GAAA,CAAA,cAAA;AACA,MAAA,WAAA,CAAA,GAAA,CAAA,cAAA,CAAA,cAAA,IAAA,CAAA;AACA,MAAA,WAAA,CAAA,YAAA,CAAA;AACA;AACA,EAAA,OAAA;AACA,IAAA,IAAA,EAAA,cAAA;AACA,IAAA,IAAA,EAAA,GAAA;AACA,IAAA,KAAA,EAAA,SAAA,GAAA,IAAA;AACA,IAAA,GAAA,EAAA,WAAA,CAAA,YAAA,GAAA,IAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,MAAA;AACA,MAAA,UAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,qBAAA,CAAA,MAAA,EAAA;AACA,EAAA,OAAA,CAAA,WAAA,KAAA;AACA,IAAA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,EAAA;AACA,MAAA,OAAA;AACA,KAAA;AACA;AACA,IAAA,MAAA,MAAA,GAAA,SAAA,CAAA,WAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,MAAA,KAAA,IAAA,EAAA;AACA,MAAA,OAAA;AACA,KAAA;AACA;AACA,IAAA,IAAAA,uCAAA,CAAA,MAAA,EAAA,MAAA,CAAA,IAAA,CAAA,EAAA;AACA,MAAA,OAAA;AACA,KAAA;AACA;AACA,IAAA,MAAA,CAAA,SAAA,CAAA,MAAA;AACA,MAAAC,6CAAA,CAAA,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA;AACA,MAAA,OAAA,IAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,CAAA;AACA;;;;"}