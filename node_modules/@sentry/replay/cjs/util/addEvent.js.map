{"version":3,"file":"addEvent.js","sources":["../../../../src/util/addEvent.ts"],"sourcesContent":["import { SESSION_IDLE_DURATION } from '../constants';\nimport type { AddEventResult, RecordingEvent, ReplayContainer } from '../types';\n\n/**\n * Add an event to the event buffer\n */\nexport async function addEvent(\n  replay: ReplayContainer,\n  event: RecordingEvent,\n  isCheckout?: boolean,\n): Promise<AddEventResult | null> {\n  if (!replay.eventBuffer) {\n    // This implies that `_isEnabled` is false\n    return null;\n  }\n\n  if (replay.isPaused()) {\n    // Do not add to event buffer when recording is paused\n    return null;\n  }\n\n  // TODO: sadness -- we will want to normalize timestamps to be in ms -\n  // requires coordination with frontend\n  const isMs = event.timestamp > 9999999999;\n  const timestampInMs = isMs ? event.timestamp : event.timestamp * 1000;\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + SESSION_IDLE_DURATION < new Date().getTime()) {\n    return null;\n  }\n\n  // Only record earliest event if a new session was created, otherwise it\n  // shouldn't be relevant\n  const earliestEvent = replay.getContext().earliestEvent;\n  if (replay.session && replay.session.segmentId === 0 && (!earliestEvent || timestampInMs < earliestEvent)) {\n    replay.getContext().earliestEvent = timestampInMs;\n  }\n\n  return replay.eventBuffer.addEvent(event, isCheckout);\n}\n"],"names":["SESSION_IDLE_DURATION"],"mappings":";;;;AAGA;AACA;AACA;AACA,eAAA,QAAA;AACA,EAAA,MAAA;AACA,EAAA,KAAA;AACA,EAAA,UAAA;AACA,EAAA;AACA,EAAA,IAAA,CAAA,MAAA,CAAA,WAAA,EAAA;AACA;AACA,IAAA,OAAA,IAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,IAAA,MAAA,CAAA,QAAA,EAAA,EAAA;AACA;AACA,IAAA,OAAA,IAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA,EAAA,MAAA,IAAA,GAAA,KAAA,CAAA,SAAA,GAAA,UAAA,CAAA;AACA,EAAA,MAAA,aAAA,GAAA,IAAA,GAAA,KAAA,CAAA,SAAA,GAAA,KAAA,CAAA,SAAA,GAAA,IAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,IAAA,aAAA,GAAAA,+BAAA,GAAA,IAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA;AACA,IAAA,OAAA,IAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA,EAAA,MAAA,aAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,aAAA,CAAA;AACA,EAAA,IAAA,MAAA,CAAA,OAAA,IAAA,MAAA,CAAA,OAAA,CAAA,SAAA,KAAA,CAAA,KAAA,CAAA,aAAA,IAAA,aAAA,GAAA,aAAA,CAAA,EAAA;AACA,IAAA,MAAA,CAAA,UAAA,EAAA,CAAA,aAAA,GAAA,aAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,MAAA,CAAA,WAAA,CAAA,QAAA,CAAA,KAAA,EAAA,UAAA,CAAA,CAAA;AACA;;;;"}