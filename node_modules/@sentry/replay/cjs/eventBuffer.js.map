{"version":3,"file":"eventBuffer.js","sources":["../../../src/eventBuffer.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n// TODO: figure out member access types and remove the line above\n\nimport { captureException } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport type { AddEventResult, EventBuffer, RecordingEvent, WorkerRequest } from './types';\nimport workerString from './worker/worker.js';\n\ninterface CreateEventBufferParams {\n  useCompression: boolean;\n}\n\n/**\n * Create an event buffer for replays.\n */\nexport function createEventBuffer({ useCompression }: CreateEventBufferParams): EventBuffer {\n  // eslint-disable-next-line no-restricted-globals\n  if (useCompression && window.Worker) {\n    const workerBlob = new Blob([workerString]);\n    const workerUrl = URL.createObjectURL(workerBlob);\n\n    try {\n      __DEBUG_BUILD__ && logger.log('[Replay] Using compression worker');\n      const worker = new Worker(workerUrl);\n      if (worker) {\n        return new EventBufferCompressionWorker(worker);\n      } else {\n        captureException(new Error('Unable to create compression worker'));\n      }\n    } catch {\n      // catch and ignore, fallback to simple event buffer\n    }\n    __DEBUG_BUILD__ && logger.log('[Replay] Falling back to simple event buffer');\n  }\n\n  __DEBUG_BUILD__ && logger.log('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\n\nclass EventBufferArray implements EventBuffer {\n  private _events: RecordingEvent[];\n\n  public constructor() {\n    this._events = [];\n  }\n\n  public get pendingLength(): number {\n    return this._events.length;\n  }\n\n  /**\n   * Returns the raw events that are buffered. In `EventBufferArray`, this is the\n   * same as `this._events`.\n   */\n  public get pendingEvents(): RecordingEvent[] {\n    return this._events;\n  }\n\n  public destroy(): void {\n    this._events = [];\n  }\n\n  public async addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult> {\n    if (isCheckout) {\n      this._events = [event];\n      return;\n    }\n\n    this._events.push(event);\n    return;\n  }\n\n  public finish(): Promise<string> {\n    return new Promise<string>(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this._events;\n      this._events = [];\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nexport class EventBufferCompressionWorker implements EventBuffer {\n  /**\n   * Keeps track of the list of events since the last flush that have not been compressed.\n   * For example, page is reloaded and a flush attempt is made, but\n   * `finish()` (and thus the flush), does not complete.\n   */\n  public _pendingEvents: RecordingEvent[] = [];\n\n  private _worker: Worker;\n  private _eventBufferItemLength: number = 0;\n  private _id: number = 0;\n\n  public constructor(worker: Worker) {\n    this._worker = worker;\n  }\n\n  /**\n   * The number of raw events that are buffered. This may not be the same as\n   * the number of events that have been compresed in the worker because\n   * `addEvent` is async.\n   */\n  public get pendingLength(): number {\n    return this._eventBufferItemLength;\n  }\n\n  /**\n   * Returns a list of the raw recording events that are being compressed.\n   */\n  public get pendingEvents(): RecordingEvent[] {\n    return this._pendingEvents;\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n  public destroy(): void {\n    __DEBUG_BUILD__ && logger.log('[Replay] Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfuly received and processed by worker.\n   */\n  public async addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult> {\n    if (isCheckout) {\n      // This event is a checkout, make sure worker buffer is cleared before\n      // proceeding.\n      await this._postMessage({\n        id: this._getAndIncrementId(),\n        method: 'init',\n        args: [],\n      });\n    }\n\n    // Don't store checkout events in `_pendingEvents` because they are too large\n    if (!isCheckout) {\n      this._pendingEvents.push(event);\n    }\n\n    return this._sendEventToWorker(event);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n  public finish(): Promise<Uint8Array> {\n    return this._finishRequest(this._getAndIncrementId());\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n  private _postMessage<T>({ id, method, args }: WorkerRequest): Promise<T> {\n    return new Promise((resolve, reject) => {\n      // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n      const listener = ({ data }: MessageEvent) => {\n        if (data.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (data.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n\n        if (!data.success) {\n          // TODO: Do some error handling, not sure what\n          __DEBUG_BUILD__ && logger.error('[Replay]', data.response);\n\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n\n        resolve(data.response);\n      };\n\n      let stringifiedArgs;\n      try {\n        stringifiedArgs = JSON.stringify(args);\n      } catch (err) {\n        __DEBUG_BUILD__ && logger.error('[Replay] Error when trying to stringify args', err);\n        stringifiedArgs = '[]';\n      }\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({ id, method, args: stringifiedArgs });\n    });\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n  private async _sendEventToWorker(event: RecordingEvent): Promise<AddEventResult> {\n    const promise = this._postMessage<void>({\n      id: this._getAndIncrementId(),\n      method: 'addEvent',\n      args: [event],\n    });\n\n    // XXX: See note in `get length()`\n    this._eventBufferItemLength++;\n\n    return promise;\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n  private async _finishRequest(id: number): Promise<Uint8Array> {\n    const promise = this._postMessage<Uint8Array>({ id, method: 'finish', args: [] });\n\n    // XXX: See note in `get length()`\n    this._eventBufferItemLength = 0;\n\n    await promise;\n\n    this._pendingEvents = [];\n\n    return promise;\n  }\n\n  /** Get the current ID and increment it for the next call. */\n  private _getAndIncrementId(): number {\n    return this._id++;\n  }\n}\n"],"names":["workerString","logger","captureException"],"mappings":"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"}