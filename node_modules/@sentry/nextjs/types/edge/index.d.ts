import '@sentry/tracing';
import { Integrations as CoreIntegrations } from '@sentry/core';
import type { Options } from '@sentry/types';
export declare const defaultIntegrations: (CoreIntegrations.InboundFilters | CoreIntegrations.FunctionToString)[];
export declare type EdgeOptions = Options;
/** Inits the Sentry NextJS SDK on the Edge Runtime. */
export declare function init(options?: EdgeOptions): void;
/**
 * Returns a release dynamically from environment variables.
 */
export declare function getSentryRelease(fallback?: string): string | undefined;
/**
 * Call `close()` on the current client, if there is one. See {@link Client.close}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this
 * parameter will cause the client to wait until all events are sent before disabling itself.
 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
 * doesn't (or if there's no client defined).
 */
export declare function close(timeout?: number): Promise<boolean>;
/**
 * This is the getter for lastEventId.
 *
 * @returns The last event id of a captured event.
 */
export declare function lastEventId(): string | undefined;
export { flush } from './utils/flush';
export * from '@sentry/core';
export { withSentryAPI, wrapApiHandlerWithSentry, } from './wrapApiHandlerWithSentry';
export { wrapMiddlewareWithSentry } from './wrapMiddlewareWithSentry';
//# sourceMappingURL=index.d.ts.map