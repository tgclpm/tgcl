var {
  _optionalChain
} = require('@sentry/utils/cjs/buildPolyfills');

Object.defineProperty(exports, '__esModule', { value: true });

const integrations = require('@sentry/integrations');
const react = require('@sentry/react');
const tracing = require('@sentry/tracing');
const metadata = require('../common/metadata.js');
const userIntegrations = require('../common/userIntegrations.js');
const performance = require('./performance.js');
const tunnelRoute = require('./tunnelRoute.js');
const _error = require('../common/_error.js');
const wrapGetInitialPropsWithSentry = require('./wrapGetInitialPropsWithSentry.js');
const wrapAppGetInitialPropsWithSentry = require('./wrapAppGetInitialPropsWithSentry.js');
const wrapDocumentGetInitialPropsWithSentry = require('./wrapDocumentGetInitialPropsWithSentry.js');
const wrapErrorGetInitialPropsWithSentry = require('./wrapErrorGetInitialPropsWithSentry.js');

// Treeshakable guard to remove all code related to tracing

const globalWithInjectedValues = global

;

/** Inits the Sentry NextJS SDK on the browser with the React SDK. */
function init(options) {
  tunnelRoute.applyTunnelRouteOption(options);
  metadata.buildMetadata(options, ['nextjs', 'react']);
  options.environment = options.environment || process.env.NODE_ENV;
  addClientIntegrations(options);

  react.init(options);

  react.configureScope(scope => {
    scope.setTag('runtime', 'browser');
    const filterTransactions = event =>
      event.type === 'transaction' && event.transaction === '/404' ? null : event;
    filterTransactions.id = 'NextClient404Filter';
    scope.addEventProcessor(filterTransactions);
  });
}

function addClientIntegrations(options) {
  let integrations$1 = options.integrations || [];

  // This value is injected at build time, based on the output directory specified in the build config. Though a default
  // is set there, we set it here as well, just in case something has gone wrong with the injection.
  const assetPrefixPath = globalWithInjectedValues.__rewriteFramesAssetPrefixPath__ || '';

  const defaultRewriteFramesIntegration = new integrations.RewriteFrames({
    // Turn `<origin>/<path>/_next/static/...` into `app:///_next/static/...`
    iteratee: frame => {
      try {
        const { origin } = new URL(frame.filename );
        frame.filename = _optionalChain([frame, 'access', _ => _.filename, 'optionalAccess', _2 => _2.replace, 'call', _3 => _3(origin, 'app://'), 'access', _4 => _4.replace, 'call', _5 => _5(assetPrefixPath, '')]);
      } catch (err) {
        // Filename wasn't a properly formed URL, so there's nothing we can do
      }

      return frame;
    },
  });
  integrations$1 = userIntegrations.addOrUpdateIntegration(defaultRewriteFramesIntegration, integrations$1);

  // This evaluates to true unless __SENTRY_TRACING__ is text-replaced with "false", in which case everything inside
  // will get treeshaken away
  if (typeof __SENTRY_TRACING__ === 'undefined' || __SENTRY_TRACING__) {
    if (tracing.hasTracingEnabled(options)) {
      const defaultBrowserTracingIntegration = new tracing.BrowserTracing({
        // eslint-disable-next-line deprecation/deprecation
        tracingOrigins: [...tracing.defaultRequestInstrumentationOptions.tracingOrigins, /^(api\/)/],
        routingInstrumentation: performance.nextRouterInstrumentation,
      });

      integrations$1 = userIntegrations.addOrUpdateIntegration(defaultBrowserTracingIntegration, integrations$1, {
        'options.routingInstrumentation': performance.nextRouterInstrumentation,
      });
    }
  }

  options.integrations = integrations$1;
}

exports.Integrations = react.Integrations;
exports.BrowserTracing = tracing.BrowserTracing;
exports.nextRouterInstrumentation = performance.nextRouterInstrumentation;
exports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;
exports.withSentryServerSideGetInitialProps = wrapGetInitialPropsWithSentry.withSentryServerSideGetInitialProps;
exports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;
exports.withSentryServerSideAppGetInitialProps = wrapAppGetInitialPropsWithSentry.withSentryServerSideAppGetInitialProps;
exports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;
exports.withSentryServerSideDocumentGetInitialProps = wrapDocumentGetInitialPropsWithSentry.withSentryServerSideDocumentGetInitialProps;
exports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;
exports.withSentryServerSideErrorGetInitialProps = wrapErrorGetInitialPropsWithSentry.withSentryServerSideErrorGetInitialProps;
exports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;
exports.init = init;
for (const k in react) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = react[k];
}
//# sourceMappingURL=index.js.map
