var {
  _optionalChain
} = require('@sentry/utils/cjs/buildPolyfills');

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('@sentry/core');
const integrations = require('@sentry/integrations');
const node = require('@sentry/node');
const tracing = require('@sentry/tracing');
const utils = require('@sentry/utils');
const domain$1 = require('domain');
const path = require('path');
const metadata = require('../common/metadata.js');
const userIntegrations = require('../common/userIntegrations.js');
const isBuild = require('./utils/isBuild.js');
const _error = require('../common/_error.js');
const react = require('@sentry/react');
const wrapGetStaticPropsWithSentry = require('./wrapGetStaticPropsWithSentry.js');
const wrapGetInitialPropsWithSentry = require('./wrapGetInitialPropsWithSentry.js');
const wrapAppGetInitialPropsWithSentry = require('./wrapAppGetInitialPropsWithSentry.js');
const wrapDocumentGetInitialPropsWithSentry = require('./wrapDocumentGetInitialPropsWithSentry.js');
const wrapErrorGetInitialPropsWithSentry = require('./wrapErrorGetInitialPropsWithSentry.js');
const wrapGetServerSidePropsWithSentry = require('./wrapGetServerSidePropsWithSentry.js');
const wrapApiHandlerWithSentry = require('./wrapApiHandlerWithSentry.js');

const globalWithInjectedValues = global

;

const domain = domain$1 ;

// TODO (v8): Remove this
/**
 * @deprecated This constant will be removed in the next major update.
 */
const IS_BUILD = isBuild.isBuild();

const IS_VERCEL = !!process.env.VERCEL;

/** Inits the Sentry NextJS SDK on node. */
function init(options) {
  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && options.debug) {
    utils.logger.enable();
  }

  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('Initializing SDK...');

  if (sdkAlreadyInitialized()) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('SDK already initialized');
    return;
  }

  metadata.buildMetadata(options, ['nextjs', 'node']);
  options.environment = options.environment || process.env.NODE_ENV;
  addServerIntegrations(options);
  // Right now we only capture frontend sessions for Next.js
  options.autoSessionTracking = false;

  // In an ideal world, this init function would be called before any requests are handled. That way, every domain we
  // use to wrap a request would inherit its scope and client from the global hub. In practice, however, handling the
  // first request is what causes us to initialize the SDK, as the init code is injected into `_app` and all API route
  // handlers, and those are only accessed in the course of handling a request. As a result, we're already in a domain
  // when `init` is called. In order to compensate for this and mimic the ideal world scenario, we stash the active
  // domain, run `init` as normal, and then restore the domain afterwards, copying over data from the main hub as if we
  // really were inheriting.
  const activeDomain = domain.active;
  domain.active = null;

  node.init(options);

  const filterTransactions = event => {
    return event.type === 'transaction' && event.transaction === '/404' ? null : event;
  };

  filterTransactions.id = 'NextServer404TransactionFilter';

  node.configureScope(scope => {
    scope.setTag('runtime', 'node');
    if (IS_VERCEL) {
      scope.setTag('vercel', true);
    }

    scope.addEventProcessor(filterTransactions);
  });

  if (activeDomain) {
    const globalHub = core.getHubFromCarrier(core.getMainCarrier());
    const domainHub = core.getHubFromCarrier(activeDomain);

    // apply the changes made by `nodeInit` to the domain's hub also
    domainHub.bindClient(globalHub.getClient());
    _optionalChain([domainHub, 'access', _ => _.getScope, 'call', _2 => _2(), 'optionalAccess', _3 => _3.update, 'call', _4 => _4(globalHub.getScope())]);
    // `scope.update()` doesnâ€™t copy over event processors, so we have to add it manually
    _optionalChain([domainHub, 'access', _5 => _5.getScope, 'call', _6 => _6(), 'optionalAccess', _7 => _7.addEventProcessor, 'call', _8 => _8(filterTransactions)]);

    // restore the domain hub as the current one
    domain.active = activeDomain;
  }

  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && utils.logger.log('SDK successfully initialized');
}

function sdkAlreadyInitialized() {
  const hub = node.getCurrentHub();
  return !!hub.getClient();
}

function addServerIntegrations(options) {
  let integrations$1 = options.integrations || [];

  // This value is injected at build time, based on the output directory specified in the build config. Though a default
  // is set there, we set it here as well, just in case something has gone wrong with the injection.
  const distDirName = globalWithInjectedValues.__rewriteFramesDistDir__ || '.next';
  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so
  // we can read in the project directory from the currently running process
  const distDirAbsPath = path.resolve(process.cwd(), distDirName);
  const SOURCEMAP_FILENAME_REGEX = new RegExp(utils.escapeStringForRegex(distDirAbsPath));

  const defaultRewriteFramesIntegration = new integrations.RewriteFrames({
    iteratee: frame => {
      frame.filename = _optionalChain([frame, 'access', _9 => _9.filename, 'optionalAccess', _10 => _10.replace, 'call', _11 => _11(SOURCEMAP_FILENAME_REGEX, 'app:///_next')]);
      return frame;
    },
  });
  integrations$1 = userIntegrations.addOrUpdateIntegration(defaultRewriteFramesIntegration, integrations$1);

  const defaultOnUncaughtExceptionIntegration = new node.Integrations.OnUncaughtException({
    exitEvenIfOtherHandlersAreRegistered: false,
  });
  defaultOnUncaughtExceptionIntegration.allowExclusionByUser = true;
  integrations$1 = userIntegrations.addOrUpdateIntegration(defaultOnUncaughtExceptionIntegration, integrations$1, {
    _options: { exitEvenIfOtherHandlersAreRegistered: false },
  });

  if (tracing.hasTracingEnabled(options)) {
    const defaultHttpTracingIntegration = new node.Integrations.Http({ tracing: true });
    integrations$1 = userIntegrations.addOrUpdateIntegration(defaultHttpTracingIntegration, integrations$1, {
      _tracing: {},
    });
  }

  options.integrations = integrations$1;
}

// TODO (v8): Remove this
/**
 * @deprecated This constant will be removed in the next major update.
 */
const deprecatedIsBuild = () => isBuild.isBuild();

exports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;
exports.ErrorBoundary = react.ErrorBoundary;
exports.showReportDialog = react.showReportDialog;
exports.withErrorBoundary = react.withErrorBoundary;
exports.withSentryGetStaticProps = wrapGetStaticPropsWithSentry.withSentryGetStaticProps;
exports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;
exports.withSentryServerSideGetInitialProps = wrapGetInitialPropsWithSentry.withSentryServerSideGetInitialProps;
exports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;
exports.withSentryServerSideAppGetInitialProps = wrapAppGetInitialPropsWithSentry.withSentryServerSideAppGetInitialProps;
exports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;
exports.withSentryServerSideDocumentGetInitialProps = wrapDocumentGetInitialPropsWithSentry.withSentryServerSideDocumentGetInitialProps;
exports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;
exports.withSentryServerSideErrorGetInitialProps = wrapErrorGetInitialPropsWithSentry.withSentryServerSideErrorGetInitialProps;
exports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;
exports.withSentryGetServerSideProps = wrapGetServerSidePropsWithSentry.withSentryGetServerSideProps;
exports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;
exports.withSentry = wrapApiHandlerWithSentry.withSentry;
exports.withSentryAPI = wrapApiHandlerWithSentry.withSentryAPI;
exports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;
exports.IS_BUILD = IS_BUILD;
exports.init = init;
exports.isBuild = deprecatedIsBuild;
for (const k in node) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) exports[k] = node[k];
}
//# sourceMappingURL=index.js.map
