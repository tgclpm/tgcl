var {
  _optionalChain
} = require('@sentry/utils/cjs/buildPolyfills');

Object.defineProperty(exports, '__esModule', { value: true });

const node = require('@sentry/node');
const tracing = require('@sentry/tracing');
const utils = require('@sentry/utils');
const isBuild = require('./utils/isBuild.js');
const wrapperUtils = require('./utils/wrapperUtils.js');

/**
 * Create a wrapped version of the user's exported `getInitialProps` function
 *
 * @param origGetInitialProps The user's `getInitialProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function wrapGetInitialPropsWithSentry(origGetInitialProps) {
  return async function ( ...args) {
    if (isBuild.isBuild()) {
      return origGetInitialProps.apply(this, args);
    }

    const [context] = args;
    const { req, res } = context;

    const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(origGetInitialProps);
    const options = _optionalChain([node.getCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getOptions, 'call', _5 => _5()]);

    // Generally we can assume that `req` and `res` are always defined on the server:
    // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object
    // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher
    // span with each other when there are no req or res objects, we simply do not trace them at all here.
    if (tracing.hasTracingEnabled() && req && res && _optionalChain([options, 'optionalAccess', _6 => _6.instrumenter]) === 'sentry') {
      const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {
        dataFetcherRouteName: context.pathname,
        requestedRouteName: context.pathname,
        dataFetchingMethodName: 'getInitialProps',
      });

      const initialProps

 = await tracedGetInitialProps.apply(this, args);

      const requestTransaction = wrapperUtils.getTransactionFromRequest(req);
      if (requestTransaction) {
        initialProps._sentryTraceData = requestTransaction.toTraceparent();

        const dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();
        initialProps._sentryBaggage = utils.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);
      }

      return initialProps;
    } else {
      return errorWrappedGetInitialProps.apply(this, args);
    }
  };
}

/**
 * @deprecated Use `wrapGetInitialPropsWithSentry` instead.
 */
const withSentryServerSideGetInitialProps = wrapGetInitialPropsWithSentry;

exports.withSentryServerSideGetInitialProps = withSentryServerSideGetInitialProps;
exports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry;
//# sourceMappingURL=wrapGetInitialPropsWithSentry.js.map
