var {
  _optionalChain
} = require('@sentry/utils/cjs/buildPolyfills');

Object.defineProperty(exports, '__esModule', { value: true });

const node = require('@sentry/node');
const tracing = require('@sentry/tracing');
const isBuild = require('./utils/isBuild.js');
const wrapperUtils = require('./utils/wrapperUtils.js');

/**
 * Create a wrapped version of the user's exported `getStaticProps` function
 *
 * @param origGetStaticProps The user's `getStaticProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function wrapGetStaticPropsWithSentry(
  origGetStaticProps,
  parameterizedRoute,
) {
  return async function (
    ...getStaticPropsArguments
  ) {
    if (isBuild.isBuild()) {
      return origGetStaticProps(...getStaticPropsArguments);
    }

    const errorWrappedGetStaticProps = wrapperUtils.withErrorInstrumentation(origGetStaticProps);
    const options = _optionalChain([node.getCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getOptions, 'call', _5 => _5()]);

    if (tracing.hasTracingEnabled() && _optionalChain([options, 'optionalAccess', _6 => _6.instrumenter]) === 'sentry') {
      return wrapperUtils.callDataFetcherTraced(errorWrappedGetStaticProps, getStaticPropsArguments, {
        parameterizedRoute,
        dataFetchingMethodName: 'getStaticProps',
      });
    }

    return errorWrappedGetStaticProps(...getStaticPropsArguments);
  };
}

/**
 * @deprecated Use `wrapGetStaticPropsWithSentry` instead.
 */
const withSentryGetStaticProps = wrapGetStaticPropsWithSentry;

exports.withSentryGetStaticProps = withSentryGetStaticProps;
exports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry;
//# sourceMappingURL=wrapGetStaticPropsWithSentry.js.map
