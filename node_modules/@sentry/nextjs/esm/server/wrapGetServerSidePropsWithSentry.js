import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';
import { getCurrentHub } from '@sentry/node';
import { hasTracingEnabled } from '@sentry/tracing';
import { dynamicSamplingContextToSentryBaggageHeader } from '@sentry/utils';
import { isBuild } from './utils/isBuild.js';
import { withErrorInstrumentation, withTracedServerSideDataFetcher, getTransactionFromRequest } from './utils/wrapperUtils.js';

/**
 * Create a wrapped version of the user's exported `getServerSideProps` function
 *
 * @param origGetServerSideProps The user's `getServerSideProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function wrapGetServerSidePropsWithSentry(
  origGetServerSideProps,
  parameterizedRoute,
) {
  return async function ( ...args) {
    if (isBuild()) {
      return origGetServerSideProps.apply(this, args);
    }

    const [context] = args;
    const { req, res } = context;

    const errorWrappedGetServerSideProps = withErrorInstrumentation(origGetServerSideProps);
    const options = _optionalChain([getCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getOptions, 'call', _5 => _5()]);

    if (hasTracingEnabled() && _optionalChain([options, 'optionalAccess', _6 => _6.instrumenter]) === 'sentry') {
      const tracedGetServerSideProps = withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {
        dataFetcherRouteName: parameterizedRoute,
        requestedRouteName: parameterizedRoute,
        dataFetchingMethodName: 'getServerSideProps',
      });

      const serverSideProps = await (tracedGetServerSideProps.apply(this, args)

);

      if ('props' in serverSideProps) {
        const requestTransaction = getTransactionFromRequest(req);
        if (requestTransaction) {
          serverSideProps.props._sentryTraceData = requestTransaction.toTraceparent();

          const dynamicSamplingContext = requestTransaction.getDynamicSamplingContext();
          serverSideProps.props._sentryBaggage = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);
        }
      }

      return serverSideProps;
    } else {
      return errorWrappedGetServerSideProps.apply(this, args);
    }
  };
}

/**
 * @deprecated Use `withSentryGetServerSideProps` instead.
 */
const withSentryGetServerSideProps = wrapGetServerSidePropsWithSentry;

export { withSentryGetServerSideProps, wrapGetServerSidePropsWithSentry };
//# sourceMappingURL=wrapGetServerSidePropsWithSentry.js.map
