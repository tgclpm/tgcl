import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';
import { getCurrentHub } from '@sentry/node';
import { hasTracingEnabled } from '@sentry/tracing';
import { isBuild } from './utils/isBuild.js';
import { withErrorInstrumentation, callDataFetcherTraced } from './utils/wrapperUtils.js';

/**
 * Create a wrapped version of the user's exported `getStaticProps` function
 *
 * @param origGetStaticProps The user's `getStaticProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function wrapGetStaticPropsWithSentry(
  origGetStaticProps,
  parameterizedRoute,
) {
  return async function (
    ...getStaticPropsArguments
  ) {
    if (isBuild()) {
      return origGetStaticProps(...getStaticPropsArguments);
    }

    const errorWrappedGetStaticProps = withErrorInstrumentation(origGetStaticProps);
    const options = _optionalChain([getCurrentHub, 'call', _ => _(), 'access', _2 => _2.getClient, 'call', _3 => _3(), 'optionalAccess', _4 => _4.getOptions, 'call', _5 => _5()]);

    if (hasTracingEnabled() && _optionalChain([options, 'optionalAccess', _6 => _6.instrumenter]) === 'sentry') {
      return callDataFetcherTraced(errorWrappedGetStaticProps, getStaticPropsArguments, {
        parameterizedRoute,
        dataFetchingMethodName: 'getStaticProps',
      });
    }

    return errorWrappedGetStaticProps(...getStaticPropsArguments);
  };
}

/**
 * @deprecated Use `wrapGetStaticPropsWithSentry` instead.
 */
const withSentryGetStaticProps = wrapGetStaticPropsWithSentry;

export { withSentryGetStaticProps, wrapGetStaticPropsWithSentry };
//# sourceMappingURL=wrapGetStaticPropsWithSentry.js.map
