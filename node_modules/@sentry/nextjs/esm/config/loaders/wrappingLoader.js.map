{"version":3,"file":"wrappingLoader.js","sources":["../../../../src/config/loaders/wrappingLoader.ts"],"sourcesContent":["import commonjs from '@rollup/plugin-commonjs';\nimport { stringMatchesSomePattern } from '@sentry/utils';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { rollup } from 'rollup';\n\nimport type { LoaderThis } from './types';\n\nconst apiWrapperTemplatePath = path.resolve(__dirname, '..', 'templates', 'apiWrapperTemplate.js');\nconst apiWrapperTemplateCode = fs.readFileSync(apiWrapperTemplatePath, { encoding: 'utf8' });\n\nconst pageWrapperTemplatePath = path.resolve(__dirname, '..', 'templates', 'pageWrapperTemplate.js');\nconst pageWrapperTemplateCode = fs.readFileSync(pageWrapperTemplatePath, { encoding: 'utf8' });\n\nconst middlewareWrapperTemplatePath = path.resolve(__dirname, '..', 'templates', 'middlewareWrapperTemplate.js');\nconst middlewareWrapperTemplateCode = fs.readFileSync(middlewareWrapperTemplatePath, { encoding: 'utf8' });\n\n// Just a simple placeholder to make referencing module consistent\nconst SENTRY_WRAPPER_MODULE_NAME = 'sentry-wrapper-module';\n\n// Needs to end in .cjs in order for the `commonjs` plugin to pick it up\nconst WRAPPING_TARGET_MODULE_NAME = '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\n\ntype LoaderOptions = {\n  pagesDir: string;\n  pageExtensionRegex: string;\n  excludeServerRoutes: Array<RegExp | string>;\n};\n\n/**\n * Replace the loaded file with a wrapped version the original file. In the wrapped version, the original file is loaded,\n * any data-fetching functions (`getInitialProps`, `getStaticProps`, and `getServerSideProps`) or API routes it contains\n * are wrapped, and then everything is re-exported.\n */\nexport default function wrappingLoader(\n  this: LoaderThis<LoaderOptions>,\n  userCode: string,\n  userModuleSourceMap: any,\n): void | string {\n  // We know one or the other will be defined, depending on the version of webpack being used\n  const {\n    pagesDir,\n    pageExtensionRegex,\n    excludeServerRoutes = [],\n  } = 'getOptions' in this ? this.getOptions() : this.query;\n\n  this.async();\n\n  // Get the parameterized route name from this page's filepath\n  const parameterizedRoute = path\n    // Get the path of the file insde of the pages directory\n    .relative(pagesDir, this.resourcePath)\n    // Add a slash at the beginning\n    .replace(/(.*)/, '/$1')\n    // Pull off the file extension\n    .replace(new RegExp(`\\\\.(${pageExtensionRegex})`), '')\n    // Any page file named `index` corresponds to root of the directory its in, URL-wise, so turn `/xyz/index` into\n    // just `/xyz`\n    .replace(/\\/index$/, '')\n    // In case all of the above have left us with an empty string (which will happen if we're dealing with the\n    // homepage), sub back in the root route\n    .replace(/^$/, '/');\n\n  // Skip explicitly-ignored pages\n  if (stringMatchesSomePattern(parameterizedRoute, excludeServerRoutes, true)) {\n    this.callback(null, userCode, userModuleSourceMap);\n    return;\n  }\n\n  const middlewareJsPath = path.join(pagesDir, '..', 'middleware.js');\n  const middlewareTsPath = path.join(pagesDir, '..', 'middleware.ts');\n\n  let templateCode: string;\n  if (parameterizedRoute.startsWith('/api')) {\n    templateCode = apiWrapperTemplateCode;\n  } else if (this.resourcePath === middlewareJsPath || this.resourcePath === middlewareTsPath) {\n    templateCode = middlewareWrapperTemplateCode;\n  } else {\n    templateCode = pageWrapperTemplateCode;\n  }\n\n  // Inject the route and the path to the file we're wrapping into the template\n  templateCode = templateCode.replace(/__ROUTE__/g, parameterizedRoute.replace(/\\\\/g, '\\\\\\\\'));\n\n  // Replace the import path of the wrapping target in the template with a path that the `wrapUserCode` function will understand.\n  templateCode = templateCode.replace(/__SENTRY_WRAPPING_TARGET_FILE__/g, WRAPPING_TARGET_MODULE_NAME);\n\n  // Run the proxy module code through Rollup, in order to split the `export * from '<wrapped file>'` out into\n  // individual exports (which nextjs seems to require).\n  wrapUserCode(templateCode, userCode, userModuleSourceMap)\n    .then(({ code: wrappedCode, map: wrappedCodeSourceMap }) => {\n      this.callback(null, wrappedCode, wrappedCodeSourceMap);\n    })\n    .catch(err => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[@sentry/nextjs] Could not instrument ${this.resourcePath}. An error occurred while auto-wrapping:\\n${err}`,\n      );\n      this.callback(null, userCode, userModuleSourceMap);\n      return;\n    });\n}\n\n/**\n * Use Rollup to process the proxy module code, in order to split its `export * from '<wrapped file>'` call into\n * individual exports (which nextjs seems to need).\n *\n * Wraps provided user code (located under the import defined via WRAPPING_TARGET_MODULE_NAME) with provided wrapper\n * code. Under the hood, this function uses rollup to bundle the modules together. Rollup is convenient for us because\n * it turns `export * from '<wrapped file>'` (which Next.js doesn't allow) into individual named exports.\n *\n * Note: This function may throw in case something goes wrong while bundling.\n *\n * @param wrapperCode The wrapper module code\n * @param userModuleCode The user module code\n * @returns The wrapped user code and a source map that describes the transformations done by this function\n */\nasync function wrapUserCode(\n  wrapperCode: string,\n  userModuleCode: string,\n  userModuleSourceMap: any,\n): Promise<{ code: string; map?: any }> {\n  const rollupBuild = await rollup({\n    input: SENTRY_WRAPPER_MODULE_NAME,\n\n    plugins: [\n      // We're using a simple custom plugin that virtualizes our wrapper module and the user module, so we don't have to\n      // mess around with file paths and so that we can pass the original user module source map to rollup so that\n      // rollup gives us a bundle with correct source mapping to the original file\n      {\n        name: 'virtualize-sentry-wrapper-modules',\n        resolveId: id => {\n          if (id === SENTRY_WRAPPER_MODULE_NAME || id === WRAPPING_TARGET_MODULE_NAME) {\n            return id;\n          } else {\n            return null;\n          }\n        },\n        load(id) {\n          if (id === SENTRY_WRAPPER_MODULE_NAME) {\n            return wrapperCode;\n          } else if (id === WRAPPING_TARGET_MODULE_NAME) {\n            return {\n              code: userModuleCode,\n              map: userModuleSourceMap, // give rollup acces to original user module source map\n            };\n          } else {\n            return null;\n          }\n        },\n      },\n\n      // People may use `module.exports` in their API routes or page files. Next.js allows that and we also need to\n      // handle that correctly so we let a plugin to take care of bundling cjs exports for us.\n      commonjs({\n        transformMixedEsModules: true,\n        sourceMap: true,\n      }),\n    ],\n\n    // We only want to bundle our wrapper module and the wrappee module into one, so we mark everything else as external.\n    external: sourceId => sourceId !== SENTRY_WRAPPER_MODULE_NAME && sourceId !== WRAPPING_TARGET_MODULE_NAME,\n\n    // Prevent rollup from stressing out about TS's use of global `this` when polyfilling await. (TS will polyfill if the\n    // user's tsconfig `target` is set to anything before `es2017`. See https://stackoverflow.com/a/72822340 and\n    // https://stackoverflow.com/a/60347490.)\n    context: 'this',\n\n    // Rollup's path-resolution logic when handling re-exports can go wrong when wrapping pages which aren't at the root\n    // level of the `pages` directory. This may be a bug, as it doesn't match the behavior described in the docs, but what\n    // seems to happen is this:\n    //\n    //   - We try to wrap `pages/xyz/userPage.js`, which contains `export { helperFunc } from '../../utils/helper'`\n    //   - Rollup converts '../../utils/helper' into an absolute path\n    //   - We mark the helper module as external\n    //   - Rollup then converts it back to a relative path, but relative to `pages/` rather than `pages/xyz/`. (This is\n    //     the part which doesn't match the docs. They say that Rollup will use the common ancestor of all modules in the\n    //     bundle as the basis for the relative path calculation, but both our temporary file and the page being wrapped\n    //     live in `pages/xyz/`, and they're the only two files in the bundle, so `pages/xyz/`` should be used as the\n    //     root. Unclear why it's not.)\n    //   - As a result of the miscalculation, our proxy module will include `export { helperFunc } from '../utils/helper'`\n    //     rather than the expected `export { helperFunc } from '../../utils/helper'`, thereby causing a build error in\n    //     nextjs..\n    //\n    // Setting `makeAbsoluteExternalsRelative` to `false` prevents all of the above by causing Rollup to ignore imports of\n    // externals entirely, with the result that their paths remain untouched (which is what we want).\n    makeAbsoluteExternalsRelative: false,\n\n    onwarn: (_warning, _warn) => {\n      // Suppress all warnings - we don't want to bother people with this output\n      // Might be stuff like \"you have unused imports\"\n      // _warn(_warning); // uncomment to debug\n    },\n  });\n\n  const finalBundle = await rollupBuild.generate({\n    format: 'esm',\n    sourcemap: 'hidden', // put source map data in the bundle but don't generate a source map commment in the output\n  });\n\n  // The module at index 0 is always the entrypoint, which in this case is the proxy module.\n  return finalBundle.output[0];\n}\n"],"names":[],"mappings":"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"}